name: Deploy to Azure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: smart-repo-assistant-devesh
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.9'
  AZURE_CONTAINER_REGISTRY: smartrepoassistant.azurecr.io
  AZURE_RESOURCE_GROUP: smart-repo-assistant-rg

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3
    
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: üß™ Run tests
      run: |
        python -m pytest test_system.py -v --cov=.
    
    - name: üîç Validate configuration
      run: |
        python -c "from config_github_app import Config; print('‚úÖ Configuration valid')"

  deploy-webapp:
    name: Deploy to Azure Web App
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3
    
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: üîê Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: üöÄ Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        startup-command: 'gunicorn --bind 0.0.0.0:8000 --timeout 120 app:app'
    
    - name: ‚öôÔ∏è Configure App Settings
      run: |
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
          GITHUB_APP_ID="${{ secrets.GITHUB_APP_ID }}" \
          GITHUB_APP_INSTALLATION_ID="${{ secrets.GITHUB_APP_INSTALLATION_ID }}" \
          GITHUB_WEBHOOK_SECRET="${{ secrets.GITHUB_WEBHOOK_SECRET }}" \
          GITHUB_PRIVATE_KEY="${{ secrets.GITHUB_PRIVATE_KEY }}" \
          DEFAULT_REPO="devesh950/Smart-Repository-Assistant" \
          FLASK_HOST="0.0.0.0" \
          FLASK_PORT="8000" \
          FLASK_DEBUG="False" \
          ENVIRONMENT="production" \
          SCM_DO_BUILD_DURING_DEPLOYMENT="true"

  deploy-container:
    name: Deploy to Azure Container Instances
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3
    
    - name: üîê Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: üîê Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
    
    - name: üê≥ Build and push Docker image
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/smart-repo-assistant:${{ github.sha }} .
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/smart-repo-assistant:${{ github.sha }}
    
    - name: üöÄ Deploy to Azure Container Instances
      run: |
        az container create \
          --name smart-repo-assistant-${{ github.sha }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/smart-repo-assistant:${{ github.sha }} \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-password ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }} \
          --dns-name-label smart-repo-assistant-dev-${{ github.run_number }} \
          --ports 5000 8501 \
          --environment-variables \
            GITHUB_APP_ID=${{ secrets.GITHUB_APP_ID }} \
            GITHUB_APP_INSTALLATION_ID=${{ secrets.GITHUB_APP_INSTALLATION_ID }} \
            GITHUB_WEBHOOK_SECRET=${{ secrets.GITHUB_WEBHOOK_SECRET }} \
            DEFAULT_REPO=devesh950/Smart-Repository-Assistant \
            FLASK_HOST=0.0.0.0 \
            FLASK_PORT=5000 \
            ENVIRONMENT=staging

  deploy-aks:
    name: Deploy to Azure Kubernetes Service
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3
    
    - name: üîê Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: üîß Set up kubectl
      uses: azure/setup-kubectl@v3
    
    - name: üîê Get AKS credentials
      run: |
        az aks get-credentials \
          --name smart-repo-assistant-aks \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
    
    - name: üîê Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
    
    - name: üê≥ Build and push Docker image
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/smart-repo-assistant:latest .
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/smart-repo-assistant:latest
    
    - name: üöÄ Deploy to AKS
      run: |
        # Update secrets first
        kubectl delete secret github-secrets --ignore-not-found=true
        kubectl create secret generic github-secrets \
          --from-literal=app-id=${{ secrets.GITHUB_APP_ID }} \
          --from-literal=installation-id=${{ secrets.GITHUB_APP_INSTALLATION_ID }} \
          --from-literal=webhook-secret=${{ secrets.GITHUB_WEBHOOK_SECRET }}
        
        # Create private key secret
        kubectl delete secret github-private-key --ignore-not-found=true
        echo "${{ secrets.GITHUB_PRIVATE_KEY }}" | kubectl create secret generic github-private-key --from-file=github-private-key.pem=/dev/stdin
        
        # Deploy application
        kubectl apply -f kubernetes-azure.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/smart-repo-assistant --timeout=300s
    
    - name: üîç Get service info
      run: |
        kubectl get services
        kubectl get ingress

  notify:
    name: Notify Deployment Status
    needs: [deploy-webapp, deploy-container, deploy-aks]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üì¢ Deployment Success
      if: ${{ needs.deploy-webapp.result == 'success' || needs.deploy-container.result == 'success' || needs.deploy-aks.result == 'success' }}
      run: |
        echo "üéâ Deployment successful!"
        echo "Web App: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "Health Check: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
        echo "Webhook URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/webhook"
    
    - name: ‚ùå Deployment Failed
      if: ${{ needs.deploy-webapp.result == 'failure' || needs.deploy-container.result == 'failure' || needs.deploy-aks.result == 'failure' }}
      run: |
        echo "‚ùå Deployment failed! Check the logs above."
        exit 1